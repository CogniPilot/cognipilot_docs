{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CogniPilot Developers Guide","text":""},{"location":"#releases","title":"Releases","text":"Name Release Date EOL Date Oct. 2023 Oct 2024 B (Mythical TBD) TBD TBD"},{"location":"#road-map","title":"Road Map","text":"<ul> <li>Github RoadMap</li> </ul> <p>CogniPilot Foundation</p>"},{"location":"#contributors","title":"Contributors","text":""},{"location":"#companies","title":"Companies","text":"<ul> <li>NXP</li> <li>Rudis Laboratories</li> </ul>"},{"location":"#universities","title":"Universities","text":"<ul> <li>Purdue</li> </ul>"},{"location":"releases/airy/","title":"About Airy Alicanto","text":"<p>An Alicanto is a bird from  Chilean mythology known to eat gold or silver and then glow. The bird is incapable of flight after overindulging on ore.</p> <p>Airy Alicanto represents the origin of CogniPilot's light weight, and minimalistic software stack following a correct by construction software paradigm.</p>"},{"location":"releases/airy/#correct-by-construction-design-drivers","title":"Correct by Construction Design Drivers","text":"<p>CogniPilot is not aiming to re-invent an opensource autopilot that can be a drop in replacement for use in Hobby drones, FPV Racing drones, or a wide variety of DIY autonomous vehicles, there are many great autopilots for that (ArduPilot, BetaFlight, PX4). CogniPilot instead focuses on state-of-the-art methologies for creating an autopilot with mathematically provable robustness properties. In order to achieve this level of reliability, accurate mathematical models of the vehicle and control software must be established that are beyond the expected domain of many hobbyists. However, for those willing to pursue the extra steps to create a mathematical model of their vehicle, templates are available to enable out of tree custom vehicles. CogniPilot is a new class of open source autopilot that can conduct safety critical missions such as transporting people, with a level of safety assurance not currently available in other open source autopilots.</p> <ul> <li> <p>Minimum Viable Code for the Mission: By minimizing the lines of source code and branching, CogniPilot ensures higher reliability, maintainability, and verifiability of the project. </p> </li> <li> <p>Minimize Branch Statements in Control and Estimation Code: CogniPilot generally classifies its code components into two areas. The first is low-level driver and application code. The second is guidance, control, and estimation code for the vehicle. Developers carefully consider the addition of each branch (if statement etc.) in the code for the estimator and controller, as developers are modelling the entire system mathematically. Each branch statement considerably complicates the verification task.</p> </li> <li> <p>Minimize Maintenance to Maintain Reliability: A goal of CogniPilot is to support a wide variety of vehicles (Planes, Copters, Boats, Rovers, Submersibles) and user applications while maintaining software integrity and reliaiblity. CogniPilot plans to limit official support for each release to a minimal amount of vehicles for each class, while providing out of tree support via templates.</p> </li> <li> <p>Deprecate if No-longer Maintained: On each release cycle, the CogniPilot technical steering committee (TSC) will make a decision on whether to maintain official support for each vehicle platform or whether to adopt a new platform. This is to combat the slow creep in lines of code due to vehicle specific edge cases. </p> </li> </ul>"},{"location":"releases/airy/#currently-supported-platforms","title":"Currently supported platforms:","text":""},{"location":"releases/airy/#rover","title":"Rover","text":"<ul> <li>MrBuggy3</li> <li>ELM4</li> </ul> <p>CogniPilot's upcoming release, to be named, but going by B-Mythical (a mythical creature with a name starting with B) will have planned additional support for:</p>"},{"location":"releases/airy/#mulirotor","title":"Mulirotor","text":"<ul> <li>NXP RDDrone</li> <li>TBD</li> </ul>"},{"location":"releases/airy/#submersible","title":"Submersible","text":"<ul> <li>TBD</li> </ul>"},{"location":"releases/airy/#plane","title":"Plane","text":"<ul> <li>TBD</li> </ul>"},{"location":"releases/airy/#software-stack","title":"Software Stack","text":"<ul> <li>Ubuntu 22.04</li> <li>Zephyr RTOS 3.5</li> <li>ROS 2 Humble</li> <li>Gazebo Garden</li> </ul> <p>To get started see Install</p>"},{"location":"releases/airy/cerebri/","title":"About Cerebri","text":"<p>Cerebri is a correct by construction autopilot. This software paradigm simplifies the verifcation and validation task through consideration of ease of verification at the the time of writing.</p> <p>Github</p>"},{"location":"releases/airy/cerebri/boards/nxp_vmu_rt1170/","title":"NXP VMU RT1170 Overview","text":"<p>More documentation coming soon.</p> <p>Board schematics</p>"},{"location":"releases/airy/cranium/compute/navqplus/setup/","title":"Connect NavQPlus and set up ROS 2 Humble","text":""},{"location":"releases/airy/cranium/compute/navqplus/setup/#before-you-start","title":"Before you start","text":"<p>Important</p> <p>The NavQPlus Ubuntu 22.04 with ROS 2 Humble image uses CycloneDDS by default.<sup>1</sup><sup>3</sup></p> <p>Attention</p> <p>These directions are written for someone with experience with embedded Linux and basic embedded computers.</p>"},{"location":"releases/airy/cranium/compute/navqplus/setup/#step-by-step","title":"Step-by-step","text":"<ol> <li>Download the pre-built latest Ubuntu 22.04 with ROS2 Humble and CycloneDDS image, specifically designed for use with the Create\u00ae 3.</li> <li>Extract the image <code>navqplus-image-&lt;version&gt;.wic</code> from the compressed downloaded file <code>navqplus-image-&lt;version&gt;.wic.bz2</code> and flash it to an SD card or the EMMC.</li> <li>Log in for the first time by connecting to your computer using the USB to UART adatper, ethernet adapter or centermost (USB 2) USB-C\u00ae port.<sup>2</sup></li> <li>Configure Wifi, System User Name and Password.</li> <li>Connect to NavQPlus over WiFi</li> </ol>"},{"location":"releases/airy/cranium/compute/navqplus/setup/#flashing-the-sd-card","title":"Flashing the SD card","text":"<p>The NavQPlus comes with a 32GB SD card that you can flash with the pre-built Ubuntu 22.04 image. See below for instructions to flash your SD card on each platform.</p> <p>Attention</p> <p>You must have an SD card reader available on your system to perform these instructions.</p> <p>To flash your SD card with the image you downloaded in step 1, we suggest using <code>dd</code>.</p> <p>To do this, open a terminal and navigate to the folder that you downloaded the <code>navqplus-image-&lt;version&gt;.wic</code> file.</p> <p>Once you are there, insert your SD card, and find the device path for it. Typically, it will be something like <code>/dev/sdX</code>.</p> <p>Attention</p> <p>Be careful that you select the correct drive path when using <code>dd</code> to flash your SD card. You can confirm with the \"Disks\" app on Ubuntu.</p> <p>Once you have found your device path, run the following command in your terminal to flash the SD card:</p> <pre><code>sudo dd if=navqplus-image-&lt;version&gt;.wic of=/dev/sdX bs=1M status=progress oflag=sync\n</code></pre> <p>Once this is done, your SD card will be flashed with the image. Make sure that your boot switches are set to boot from SD.</p>"},{"location":"releases/airy/cranium/compute/navqplus/setup/#flashing-the-emmc","title":"Flashing the eMMC","text":"<p>To flash the eMMC on your NavQPlus, you will need to download UUU, a tool created by NXP to flash NXP boards. Make sure to download the correct application for your platform. The file titled \"uuu\" with no file extension is a binary file for use on x86/64 Linux.</p> <p>Once you have downloaded UUU, find the boot switches on your NavQPlus and flip them to the \"Flash\" mode.</p> <p>Then, connect NavQPlus to your computer using the leftmost (USB 1) USB-C\u00ae port and the two flash status light should light up as shown in the image.  </p> <p>Run the following command to make sure that the NavQPlus is recognized by UUU:</p> <pre><code>./uuu -lsusb\n</code></pre> <p></p> <p>You should see that there is a device detected. If so, you can continue flashing. To flash your board, use the command below:</p> <pre><code>./uuu -b emmc_all navqplus-image-&lt;version&gt;.bin-flash_evk navqplus-image-&lt;version&gt;.wic\n</code></pre> <p>Once this process has finished, make sure that the flash was successfull by comparing to the image below. If so, configure your boot switches to boot from eMMC.</p> <p></p>"},{"location":"releases/airy/cranium/compute/navqplus/setup/#boot-switches","title":"Boot Switches","text":"<p>NavQPlus can be configured to boot from either SD card or eMMC. It also has a flash mode that allows you to flash either the eMMC or SD card over USB-C\u00ae. See the table below for the boot switch configuration.</p> Mode Switch 1 Switch 2 SD ON ON eMMC OFF ON Flash ON OFF"},{"location":"releases/airy/cranium/compute/navqplus/setup/#log-in-for-the-first-time","title":"Log in for the first time","text":"<p>Power on the NavQPlus by plugging in a USB-C\u00ae cable to the centermost (USB 2) USB-C\u00ae port. NavQPlus will boot, and you will be able to confirm it has fully booted by observing the LEDs on board. The 3 LEDs by the USB1 port should be on, as well as two LEDs next to the CAN bus connectors.</p> <p>To log into NavQPlus, you can use the included USB to UART adapter, Ethernet, or USB-C\u00ae gadget mode (recommended). The default username/password combo is as follows:</p> <p>Username: user</p> <p>Password: user</p>"},{"location":"releases/airy/cranium/compute/navqplus/setup/#usb-to-uart-adapter","title":"USB to UART adapter","text":"<p>Connect the included USB to UART adapter to the UART2 port on the NavQPlus, and open your favorite serial console application. Open a serial console with a baud rate of 115200. Press enter if there is no output on the screen to get a log-in prompt. </p>"},{"location":"releases/airy/cranium/compute/navqplus/setup/#ethernet","title":"Ethernet","text":"<p>Connect the included IX Industrial Ethernet cable to NavQPlus, and connect the RJ45 connector to your computer, switch, or router on your local network. You can log into NavQPlus over SSH. The default hostname for NavQPlus is imx8mpnavq. To SSH into NavQPlus, you can run the following command:</p> <pre><code>ssh user@imx8mpnavq.local\n</code></pre>"},{"location":"releases/airy/cranium/compute/navqplus/setup/#usb-c-gadget-ethernet","title":"USB-C\u00ae Gadget Ethernet","text":"<p>The IP address of the <code>usb0</code> network interface on NavQPlus is statically assigned to 192.168.186.3. If you want to use USB-C\u00ae gadget ethernet to connect to NavQPlus, you will need to assign a static IP to your existing gadget ethernet interface on your computer. The network configuration is as follows:</p> <p>IP Address: 192.168.186.2</p> <p>Network Mask: 255.255.255.0</p> <p></p> <p>Once you have set up your USB-C\u00ae gadget ethernet interface on your computer, you can SSH by running:</p> <pre><code>ssh user@imx8mpnavq.local\n</code></pre>"},{"location":"releases/airy/cranium/compute/navqplus/setup/#expand-image","title":"Expand Image","text":"<p>The flashed images will need expanding to utilize all the available storage. After logging into the NavQPlus open a terminal and run:</p> <ul> <li>Expand image on the SD:</li> </ul> <pre><code>echo -e \"d\\n2\\nn\\np\\n2\\n196608\\n\\n\\nw\" | sudo fdisk /dev/mmcblk1 &amp;&amp; sudo resize2fs /dev/mmcblk1p2\n</code></pre> <ul> <li>Expand image on the eMMC:</li> </ul> <pre><code>echo -e \"d\\n2\\nn\\np\\n2\\n196608\\n\\n\\nw\" | sudo fdisk /dev/mmcblk2 &amp;&amp; sudo resize2fs /dev/mmcblk2p2\n</code></pre>"},{"location":"releases/airy/cranium/compute/navqplus/setup/#configuring-wifi-system-username-and-password","title":"Configuring WiFi, System Username and Password","text":""},{"location":"releases/airy/cranium/compute/navqplus/setup/#configuring-wifi-on-navqplus","title":"Configuring WiFi on NavQPlus","text":"<p>To connect NavQPlus to your local WiFi network, you can use the <code>nmcli</code> command. The interface is relatively straightforward, to connect with <code>nmcli</code>, run the following command:</p> <pre><code>sudo nmcli device wifi connect &lt;network_name&gt; password \"&lt;password&gt;\"\n</code></pre> <p>Once you are finished connecting to your local WiFi network, you can exit the application. Your NavQPlus will continue to connect to this WiFi network even after a reboot.</p>"},{"location":"releases/airy/cranium/compute/navqplus/setup/#configuring-system-username-and-password","title":"Configuring System Username and Password","text":"<p>To change the default username and password, use the commands below.</p> <p>Username:</p> <pre><code>usermod -l &lt;new_username&gt; user\nmv /home/user /home/&lt;new_username&gt;\n</code></pre> <p>Password:</p> <pre><code>passwd\n</code></pre>"},{"location":"releases/airy/cranium/compute/navqplus/setup/#connecting-to-navqplus-over-wifi","title":"Connecting to NavQPlus over WiFi","text":"<p>Once you have set up your NavQPlus to connect to your local WiFi network, you can now SSH into your NavQPlus over WiFi by running:</p> <pre><code>ssh &lt;your-username&gt;@imx8mpnavq.local\n</code></pre> <ol> <li> <p>Ubuntu is a registered trademark of Canonical Ltd.\u00a0\u21a9</p> </li> <li> <p>USB-C\u00ae is a trademark of USB Implementers Forum.\u00a0\u21a9</p> </li> <li> <p>ROS 2 is governed by Open Robotics\u00a0\u21a9</p> </li> </ol>"},{"location":"releases/airy/getting_started/install/","title":"Installation","text":""},{"location":"releases/airy/getting_started/install/#requirements","title":"Requirements","text":"<ul> <li>Ubuntu 22.04 host environment</li> </ul> <p>This may work on other environments but only Ubuntu 22.04 is officially supported.</p>"},{"location":"releases/airy/getting_started/install/#setup-ssh-keys-on-host-and-github","title":"Setup SSH keys on Host and GitHub","text":"<ul> <li>Ensure that you have setup ssh keys on your host computer and GitHub to be able to clone the CogniPilot repositories: Connecting to GitHub with SSH</li> </ul>"},{"location":"releases/airy/getting_started/install/#setup-gpg-keys-on-host-and-github-optional","title":"Setup GPG keys on Host and GitHub (Optional)","text":"<ul> <li>Ensure that you have setup gpg keys on your host computer and GitHub to sign your commits: Connecting to GitHub with SSH</li> </ul>"},{"location":"releases/airy/getting_started/install/#install-git","title":"Install Git","text":"<pre><code>sudo apt install git\n</code></pre>"},{"location":"releases/airy/getting_started/install/#docker-option","title":"Docker Option","text":"<p>If you wish, there is a Docker Development Container that may be used.</p>"},{"location":"releases/airy/getting_started/install/#clone-helmet","title":"Clone Helmet","text":"<pre><code>mkdir -p ~/cognipilot\ncd ~/cognipilot\ngit clone git@github.com:cognipilot/helmet\n</code></pre>"},{"location":"releases/airy/getting_started/install/#run-install-script-if-not-using-docker","title":"Run Install Script (If not using docker)","text":"<pre><code>~/cognipilot/helmet/install/native_install.sh\n. ~/.profile\n</code></pre>"},{"location":"releases/airy/getting_started/install/#convenience-scripts","title":"Convenience Scripts","text":""},{"location":"releases/airy/getting_started/install/#build_mrbuggy3_sitl","title":"build_mrbuggy3_sitl","text":"<pre><code>build_mrbuggy3_sitl\n</code></pre> <p>This command executes the script build_mrbuggy3_sitl.</p> <p>This script:</p> <ul> <li>Sets up the vcs workspaces based on yaml files provided in helmet.</li> <li>Builds the cranium ROS 2 workspace</li> <li>Builds Cerebri native_posix software-in-the-loop simuliation</li> <li>Builds Cyecca (control/estimation software)</li> <li>Builds Electrode (ground station software)</li> </ul>"},{"location":"releases/airy/getting_started/install/#docs","title":"docs","text":"<pre><code>docs\n</code></pre> <p>This command executes the script docs.</p> <p>This script:</p> <ul> <li>Downloads and builds the documentation repository for the documentation you are reading so that contributions can be made easily.</li> </ul>"},{"location":"releases/airy/getting_started/install/#cyecca","title":"cyecca","text":"<pre><code>cyecca\n</code></pre> <p>This script:</p> <ul> <li>Starts a JupyterLab instance for Cyecca to aid in developing algorithms.</li> </ul>"},{"location":"releases/airy/getting_started/install/#run-mrbuggy3-sitl-in-jupyterlab-terminal-or-bash-directly","title":"Run MrBuggy3 SITL (in JupyterLab terminal or Bash directly)","text":"<pre><code>ros2 launch mrbuggy3_gz_bringup gz_nav2.launch.py\n</code></pre> <p>Attention</p> <p>If running on a machine with a limited graphics card use:</p> <pre><code>ros2 launch mrbuggy3_gz_bringup gz_nav2.launch.py world:=basic_map\n</code></pre>"},{"location":"releases/airy/getting_started/install/#simulation","title":"Simulation","text":"<p>Example of simulation running.</p> <p></p> <p>Attention</p> <p>Use a joystick controller (Logitech F310 suggested) to control vehicle modes.</p>"},{"location":"releases/airy/getting_started/install/#select-a-mode","title":"Select a Mode:","text":"<ul> <li>A: manual</li> <li>X: cmd_vel (nav2)</li> <li>B: auto (corti)</li> </ul>"},{"location":"releases/airy/getting_started/install/#manual-mode","title":"Manual Mode:","text":"<ul> <li>Left stick Up/Down: throttle</li> <li>Right stick Left/Right: steering</li> </ul>"},{"location":"releases/airy/getting_started/install/#nav2-cmd_vel-mode","title":"Nav2 (cmd_vel) Mode:","text":"<ul> <li>Click 2D Pose Goal and select desired location on RVIZ2 map.</li> </ul>"},{"location":"releases/airy/getting_started/install/#auto-mode","title":"Auto Mode","text":"<ul> <li>Click 2D Pose Goal and select desired location on RVIZ2 map.</li> </ul>"},{"location":"releases/airy/getting_started/install/#arming","title":"Arming","text":"<ul> <li>START: arm</li> <li>BACK: disarm</li> </ul>"},{"location":"releases/airy/getting_started/advanced/docker/","title":"Docker","text":"<p>If you wish, there is a development docker container (docker hub, docker source) for CogniPilot with Nvidia GPU support. If you use this option, do not run the native_install script, as the packages are already installed.</p>"},{"location":"releases/airy/getting_started/advanced/docker/#dependencies","title":"Dependencies","text":"<p>You must install the latest official docker.</p> <ul> <li>Install Docker</li> </ul> <p>Tip</p> <p>Don't forget Linux Post Install </p>"},{"location":"releases/airy/getting_started/advanced/docker/#clone-docker-repository","title":"Clone Docker Repository","text":"<p>On the Host</p> <pre><code>mkdir -p ~/cognipilot\ncd ~/cognipilot\ngit clone https://github.com/cognipilot/docker\ncd  ~/cognipilot/docker\ngit submodule update --init --recursive\n</code></pre>"},{"location":"releases/airy/getting_started/advanced/docker/#start-the-docker-image","title":"Start the Docker Image","text":"<p>The dream start command, automatically pulls the dream image from dockerhub, and starts the image.</p> <p>On the Host</p> <pre><code>cd ~/cognipilot/docker/dream\n./dream start\n</code></pre>"},{"location":"releases/airy/getting_started/advanced/docker/#execute-a-command-on-the-docker-image","title":"Execute a Command on the Docker Image","text":"<p>This starts a shell within the container.</p> <p>On the Host</p> <pre><code>./dream exec\n</code></pre> <p>If passed extra arguments will run those commands as well.</p>"},{"location":"releases/airy/getting_started/advanced/docker/#convenience-scripts-docker-specific","title":"Convenience Scripts (Docker Specific)","text":""},{"location":"releases/airy/getting_started/advanced/docker/#unlock","title":"unlock","text":"<p>This command executes the script docs.</p> <ul> <li>Unlocks GPG and SSH keys mounted in the docker image.</li> </ul> <p>Within the Container</p> <pre><code>unlock\n</code></pre> <p>See the other non-docker specific scripts in the main installation</p>"},{"location":"releases/airy/getting_started/advanced/docker/#build-the-docker-image-for-advanced-users","title":"Build the Docker Image (For Advanced Users)","text":"<p>This process will take awhile. It is usually sufficient to use dream start instead, which will automatically pull the latest image from dockerhub.</p> <p>On the Host</p> <pre><code>cd ~/cognipilot/docker/dream\n./dream build\n</code></pre>"},{"location":"releases/b-mythical/","title":"About B-mythical","text":"<p>Name to be determined.</p> <p>See the current progress on the Roadmap.</p>"},{"location":"releases/b-mythical/#software-stack","title":"Software Stack","text":"<ul> <li>Ubuntu 24.04</li> <li>Zephyr RTOS 3.6+</li> <li>ROS 2 Jazzy</li> <li>Gazebo Ionic</li> </ul>"}]}