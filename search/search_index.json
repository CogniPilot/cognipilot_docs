{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CogniPilot Developers Guide Releases Name Release Date EOL Date Oct. 2023 Oct 2024 B (Mythical TBD) TBD TBD Road Map Github RoadMap CogniPilot Foundation Contributors Companies NXP Rudis Laboratories Universities Purdue","title":"Home"},{"location":"#cognipilot-developers-guide","text":"","title":"CogniPilot Developers Guide"},{"location":"#releases","text":"Name Release Date EOL Date Oct. 2023 Oct 2024 B (Mythical TBD) TBD TBD","title":"Releases"},{"location":"#road-map","text":"Github RoadMap CogniPilot Foundation","title":"Road Map"},{"location":"#contributors","text":"","title":"Contributors"},{"location":"#companies","text":"NXP Rudis Laboratories","title":"Companies"},{"location":"#universities","text":"Purdue","title":"Universities"},{"location":"cerebri/","text":"About Cerebri Cerebri is a correct by construction autopilot. This software paradigm simplifies the verifcation and validation task through consideration of ease of verification at the the time of writing. Github","title":"About"},{"location":"cerebri/#about-cerebri","text":"Cerebri is a correct by construction autopilot. This software paradigm simplifies the verifcation and validation task through consideration of ease of verification at the the time of writing. Github","title":"About Cerebri"},{"location":"cerebri/boards/nxp_mr_canhubk3/","text":"NXP MR CANHUBK3 More documentation coming soon. NXP documentation","title":"NXP\u00ae MR CANHUBK3"},{"location":"cerebri/boards/nxp_mr_canhubk3/#nxp-mr-canhubk3","text":"More documentation coming soon. NXP documentation","title":"NXP MR CANHUBK3"},{"location":"cerebri/boards/nxp_vmu_rt1170/","text":"NXP VMU RT1170 Overview More documentation coming soon. Board schematics","title":"NXP\u00ae VMU RT1170"},{"location":"cerebri/boards/nxp_vmu_rt1170/#nxp-vmu-rt1170-overview","text":"More documentation coming soon. Board schematics","title":"NXP VMU RT1170 Overview"},{"location":"cerebri/platforms/multicopters/","text":"MultiCopters Overview","title":"MultiCopters"},{"location":"cerebri/platforms/multicopters/#multicopters-overview","text":"","title":"MultiCopters Overview"},{"location":"cerebri/platforms/rovers/","text":"Rovers Overview","title":"Rovers"},{"location":"cerebri/platforms/rovers/#rovers-overview","text":"","title":"Rovers Overview"},{"location":"cranium/compute/navqplus/setup/","text":"Connect NavQPlus and set up ROS 2 Humble Before you start Important The NavQPlus Ubuntu 22.04 with ROS 2 Humble image uses CycloneDDS by default. 1 3 Attention These directions are written for someone with experience with embedded Linux and basic embedded computers. Step-by-step Download the pre-built latest Ubuntu 22.04 with ROS2 Humble and CycloneDDS image , specifically designed for use with the Create\u00ae 3. Extract the image navqplus-image-<version>.wic from the compressed downloaded file navqplus-image-<version>.wic.bz2 and flash it to an SD card or the EMMC . Log in for the first time by connecting to your computer using the USB to UART adatper , ethernet adapter or centermost (USB 2) USB-C\u00ae port . 2 Configure Wifi, System User Name and Password. Connect to NavQPlus over WiFi Flashing the SD card The NavQPlus comes with a 32GB SD card that you can flash with the pre-built Ubuntu 22.04 image. See below for instructions to flash your SD card on each platform. Attention You must have an SD card reader available on your system to perform these instructions. To flash your SD card with the image you downloaded in step 1, we suggest using dd . To do this, open a terminal and navigate to the folder that you downloaded the navqplus-image-<version>.wic file. Once you are there, insert your SD card, and find the device path for it. Typically, it will be something like /dev/sdX . Attention Be careful that you select the correct drive path when using dd to flash your SD card. You can confirm with the \"Disks\" app on Ubuntu. Once you have found your device path, run the following command in your terminal to flash the SD card: sudo dd if=navqplus-image-<version>.wic of=/dev/sdX bs=1M status=progress oflag=sync Once this is done, your SD card will be flashed with the image. Make sure that your boot switches are set to boot from SD. Flashing the eMMC To flash the eMMC on your NavQPlus, you will need to download UUU , a tool created by NXP to flash NXP boards. Make sure to download the correct application for your platform. The file titled \"uuu\" with no file extension is a binary file for use on x86/64 Linux. Once you have downloaded UUU, find the boot switches on your NavQPlus and flip them to the \"Flash\" mode. Then, connect NavQPlus to your computer using the leftmost (USB 1) USB-C\u00ae port and the two flash status light should light up as shown in the image. Run the following command to make sure that the NavQPlus is recognized by UUU: ./uuu -lsusb You should see that there is a device detected. If so, you can continue flashing. To flash your board, use the command below: ./uuu -b emmc_all navqplus-image-<version>.bin-flash_evk navqplus-image-<version>.wic Once this process has finished, make sure that the flash was successfull by comparing to the image below. If so, configure your boot switches to boot from eMMC. Boot Switches NavQPlus can be configured to boot from either SD card or eMMC. It also has a flash mode that allows you to flash either the eMMC or SD card over USB-C\u00ae. See the table below for the boot switch configuration. Mode Switch 1 Switch 2 SD ON ON eMMC OFF ON Flash ON OFF Log in for the first time Power on the NavQPlus by plugging in a USB-C\u00ae cable to the centermost (USB 2) USB-C\u00ae port. NavQPlus will boot, and you will be able to confirm it has fully booted by observing the LEDs on board. The 3 LEDs by the USB1 port should be on, as well as two LEDs next to the CAN bus connectors. To log into NavQPlus, you can use the included USB to UART adapter , Ethernet , or USB-C\u00ae gadget mode (recommended) . The default username/password combo is as follows: Username: user Password: user USB to UART adapter Connect the included USB to UART adapter to the UART2 port on the NavQPlus, and open your favorite serial console application. Open a serial console with a baud rate of 115200. Press enter if there is no output on the screen to get a log-in prompt. Ethernet Connect the included IX Industrial Ethernet cable to NavQPlus, and connect the RJ45 connector to your computer, switch, or router on your local network. You can log into NavQPlus over SSH. The default hostname for NavQPlus is imx8mpnavq. To SSH into NavQPlus, you can run the following command: ssh user@imx8mpnavq.local USB-C\u00ae Gadget Ethernet The IP address of the usb0 network interface on NavQPlus is statically assigned to 192.168.186.3. If you want to use USB-C\u00ae gadget ethernet to connect to NavQPlus, you will need to assign a static IP to your existing gadget ethernet interface on your computer. The network configuration is as follows: IP Address: 192.168.186.2 Network Mask: 255.255.255.0 Once you have set up your USB-C\u00ae gadget ethernet interface on your computer, you can SSH by running: ssh user@imx8mpnavq.local Expand Image The flashed images will need expanding to utilize all the available storage. After logging into the NavQPlus open a terminal and run: Expand image on the SD: echo -e \"d\\n2\\nn\\np\\n2\\n196608\\n\\n\\nw\" | sudo fdisk /dev/mmcblk1 && sudo resize2fs /dev/mmcblk1p2 Expand image on the eMMC: echo -e \"d\\n2\\nn\\np\\n2\\n196608\\n\\n\\nw\" | sudo fdisk /dev/mmcblk2 && sudo resize2fs /dev/mmcblk2p2 Configuring WiFi, System Username and Password Configuring WiFi on NavQPlus To connect NavQPlus to your local WiFi network, you can use the nmcli command. The interface is relatively straightforward, to connect with nmcli , run the following command: sudo nmcli device wifi connect <network_name> password \"<password>\" Once you are finished connecting to your local WiFi network, you can exit the application. Your NavQPlus will continue to connect to this WiFi network even after a reboot. Configuring System Username and Password To change the default username and password, use the commands below. Username: usermod -l <new_username> user mv /home/user /home/<new_username> Password: passwd Connecting to NavQPlus over WiFi Once you have set up your NavQPlus to connect to your local WiFi network, you can now SSH into your NavQPlus over WiFi by running: ssh <your-username>@imx8mpnavq.local Ubuntu is a registered trademark of Canonical Ltd. \u21a9 USB-C\u00ae is a trademark of USB Implementers Forum. \u21a9 ROS 2 is governed by Open Robotics \u21a9","title":"Setup"},{"location":"cranium/compute/navqplus/setup/#connect-navqplus-and-set-up-ros-2-humble","text":"","title":"Connect NavQPlus and set up ROS 2 Humble"},{"location":"cranium/compute/navqplus/setup/#before-you-start","text":"Important The NavQPlus Ubuntu 22.04 with ROS 2 Humble image uses CycloneDDS by default. 1 3 Attention These directions are written for someone with experience with embedded Linux and basic embedded computers.","title":"Before you start"},{"location":"cranium/compute/navqplus/setup/#step-by-step","text":"Download the pre-built latest Ubuntu 22.04 with ROS2 Humble and CycloneDDS image , specifically designed for use with the Create\u00ae 3. Extract the image navqplus-image-<version>.wic from the compressed downloaded file navqplus-image-<version>.wic.bz2 and flash it to an SD card or the EMMC . Log in for the first time by connecting to your computer using the USB to UART adatper , ethernet adapter or centermost (USB 2) USB-C\u00ae port . 2 Configure Wifi, System User Name and Password. Connect to NavQPlus over WiFi","title":"Step-by-step"},{"location":"cranium/compute/navqplus/setup/#flashing-the-sd-card","text":"The NavQPlus comes with a 32GB SD card that you can flash with the pre-built Ubuntu 22.04 image. See below for instructions to flash your SD card on each platform. Attention You must have an SD card reader available on your system to perform these instructions. To flash your SD card with the image you downloaded in step 1, we suggest using dd . To do this, open a terminal and navigate to the folder that you downloaded the navqplus-image-<version>.wic file. Once you are there, insert your SD card, and find the device path for it. Typically, it will be something like /dev/sdX . Attention Be careful that you select the correct drive path when using dd to flash your SD card. You can confirm with the \"Disks\" app on Ubuntu. Once you have found your device path, run the following command in your terminal to flash the SD card: sudo dd if=navqplus-image-<version>.wic of=/dev/sdX bs=1M status=progress oflag=sync Once this is done, your SD card will be flashed with the image. Make sure that your boot switches are set to boot from SD.","title":"Flashing the SD card"},{"location":"cranium/compute/navqplus/setup/#flashing-the-emmc","text":"To flash the eMMC on your NavQPlus, you will need to download UUU , a tool created by NXP to flash NXP boards. Make sure to download the correct application for your platform. The file titled \"uuu\" with no file extension is a binary file for use on x86/64 Linux. Once you have downloaded UUU, find the boot switches on your NavQPlus and flip them to the \"Flash\" mode. Then, connect NavQPlus to your computer using the leftmost (USB 1) USB-C\u00ae port and the two flash status light should light up as shown in the image. Run the following command to make sure that the NavQPlus is recognized by UUU: ./uuu -lsusb You should see that there is a device detected. If so, you can continue flashing. To flash your board, use the command below: ./uuu -b emmc_all navqplus-image-<version>.bin-flash_evk navqplus-image-<version>.wic Once this process has finished, make sure that the flash was successfull by comparing to the image below. If so, configure your boot switches to boot from eMMC.","title":"Flashing the eMMC"},{"location":"cranium/compute/navqplus/setup/#boot-switches","text":"NavQPlus can be configured to boot from either SD card or eMMC. It also has a flash mode that allows you to flash either the eMMC or SD card over USB-C\u00ae. See the table below for the boot switch configuration. Mode Switch 1 Switch 2 SD ON ON eMMC OFF ON Flash ON OFF","title":"Boot Switches"},{"location":"cranium/compute/navqplus/setup/#log-in-for-the-first-time","text":"Power on the NavQPlus by plugging in a USB-C\u00ae cable to the centermost (USB 2) USB-C\u00ae port. NavQPlus will boot, and you will be able to confirm it has fully booted by observing the LEDs on board. The 3 LEDs by the USB1 port should be on, as well as two LEDs next to the CAN bus connectors. To log into NavQPlus, you can use the included USB to UART adapter , Ethernet , or USB-C\u00ae gadget mode (recommended) . The default username/password combo is as follows: Username: user Password: user","title":"Log in for the first time"},{"location":"cranium/compute/navqplus/setup/#usb-to-uart-adapter","text":"Connect the included USB to UART adapter to the UART2 port on the NavQPlus, and open your favorite serial console application. Open a serial console with a baud rate of 115200. Press enter if there is no output on the screen to get a log-in prompt.","title":"USB to UART adapter"},{"location":"cranium/compute/navqplus/setup/#ethernet","text":"Connect the included IX Industrial Ethernet cable to NavQPlus, and connect the RJ45 connector to your computer, switch, or router on your local network. You can log into NavQPlus over SSH. The default hostname for NavQPlus is imx8mpnavq. To SSH into NavQPlus, you can run the following command: ssh user@imx8mpnavq.local","title":"Ethernet"},{"location":"cranium/compute/navqplus/setup/#usb-c-gadget-ethernet","text":"The IP address of the usb0 network interface on NavQPlus is statically assigned to 192.168.186.3. If you want to use USB-C\u00ae gadget ethernet to connect to NavQPlus, you will need to assign a static IP to your existing gadget ethernet interface on your computer. The network configuration is as follows: IP Address: 192.168.186.2 Network Mask: 255.255.255.0 Once you have set up your USB-C\u00ae gadget ethernet interface on your computer, you can SSH by running: ssh user@imx8mpnavq.local","title":"USB-C\u00ae Gadget Ethernet"},{"location":"cranium/compute/navqplus/setup/#expand-image","text":"The flashed images will need expanding to utilize all the available storage. After logging into the NavQPlus open a terminal and run: Expand image on the SD: echo -e \"d\\n2\\nn\\np\\n2\\n196608\\n\\n\\nw\" | sudo fdisk /dev/mmcblk1 && sudo resize2fs /dev/mmcblk1p2 Expand image on the eMMC: echo -e \"d\\n2\\nn\\np\\n2\\n196608\\n\\n\\nw\" | sudo fdisk /dev/mmcblk2 && sudo resize2fs /dev/mmcblk2p2","title":"Expand Image"},{"location":"cranium/compute/navqplus/setup/#configuring-wifi-system-username-and-password","text":"","title":"Configuring WiFi, System Username and Password"},{"location":"cranium/compute/navqplus/setup/#configuring-wifi-on-navqplus","text":"To connect NavQPlus to your local WiFi network, you can use the nmcli command. The interface is relatively straightforward, to connect with nmcli , run the following command: sudo nmcli device wifi connect <network_name> password \"<password>\" Once you are finished connecting to your local WiFi network, you can exit the application. Your NavQPlus will continue to connect to this WiFi network even after a reboot.","title":"Configuring WiFi on NavQPlus"},{"location":"cranium/compute/navqplus/setup/#configuring-system-username-and-password","text":"To change the default username and password, use the commands below. Username: usermod -l <new_username> user mv /home/user /home/<new_username> Password: passwd","title":"Configuring System Username and Password"},{"location":"cranium/compute/navqplus/setup/#connecting-to-navqplus-over-wifi","text":"Once you have set up your NavQPlus to connect to your local WiFi network, you can now SSH into your NavQPlus over WiFi by running: ssh <your-username>@imx8mpnavq.local Ubuntu is a registered trademark of Canonical Ltd. \u21a9 USB-C\u00ae is a trademark of USB Implementers Forum. \u21a9 ROS 2 is governed by Open Robotics \u21a9","title":"Connecting to NavQPlus over WiFi"},{"location":"cranium/corti/corti/","text":"Corti Overview","title":"Corti"},{"location":"cranium/corti/corti/#corti-overview","text":"","title":"Corti Overview"},{"location":"cranium/synapse/synapse/","text":"Synapse Overview","title":"Synapse"},{"location":"cranium/synapse/synapse/#synapse-overview","text":"","title":"Synapse Overview"},{"location":"dream/worlds/worlds/","text":"Worlds Overview","title":"Worlds"},{"location":"dream/worlds/worlds/#worlds-overview","text":"","title":"Worlds Overview"},{"location":"electrode/joystick/","text":"Joystick Overview","title":"Joystick"},{"location":"electrode/joystick/#joystick-overview","text":"","title":"Joystick Overview"},{"location":"electrode/rviz2/","text":"RVIZ 2 Overview","title":"RVIZ 2"},{"location":"electrode/rviz2/#rviz-2-overview","text":"","title":"RVIZ 2 Overview"},{"location":"helmet/","text":"Helmet Overview","title":"About"},{"location":"helmet/#helmet-overview","text":"","title":"Helmet Overview"},{"location":"reference_systems/b3rb/buggy3_revb/","text":"Buggy 3 Platform Overview","title":"Hardware"},{"location":"reference_systems/b3rb/buggy3_revb/#buggy-3-platform-overview","text":"","title":"Buggy 3 Platform Overview"},{"location":"reference_systems/b3rb/simulation/","text":"Buggy 3 Simulation","title":"Simulation"},{"location":"reference_systems/b3rb/simulation/#buggy-3-simulation","text":"","title":"Buggy 3 Simulation"},{"location":"reference_systems/elm4/el_mandadero/","text":"El Mandadero Platform Overview","title":"Hardware"},{"location":"reference_systems/elm4/el_mandadero/#el-mandadero-platform-overview","text":"","title":"El Mandadero Platform Overview"},{"location":"reference_systems/elm4/simulation/","text":"Simulate El Mandadero","title":"Simulation"},{"location":"reference_systems/elm4/simulation/#simulate-el-mandadero","text":"","title":"Simulate El Mandadero"},{"location":"reference_systems/melm/minimando/","text":"El Mandadero Platform Overview","title":"El Mandadero Platform Overview"},{"location":"reference_systems/melm/minimando/#el-mandadero-platform-overview","text":"","title":"El Mandadero Platform Overview"},{"location":"reference_systems/melm/simulation/","text":"Simulate MiniMando","title":"Simulate MiniMando"},{"location":"reference_systems/melm/simulation/#simulate-minimando","text":"","title":"Simulate MiniMando"},{"location":"reference_systems/rddrone/rddrone/","text":"RDDRONE Platform Overview","title":"Hardware"},{"location":"reference_systems/rddrone/rddrone/#rddrone-platform-overview","text":"","title":"RDDRONE Platform Overview"},{"location":"reference_systems/rddrone/simulation/","text":"Simulate RDDRONE","title":"Simulation"},{"location":"reference_systems/rddrone/simulation/#simulate-rddrone","text":"","title":"Simulate RDDRONE"},{"location":"releases/airy/","text":"About Airy Alicanto An Alicanto is a bird from Chilean mythology known to eat gold or silver and then glow. The bird is incapable of flight after overindulging on ore. Airy Alicanto represents the origin of CogniPilot's light weight, and minimalistic software stack following a correct by construction software paradigm. Correct by Construction Design Drivers CogniPilot is not aiming to re-invent an opensource autopilot that can be a drop in replacement for use in Hobby drones, FPV Racing drones, or a wide variety of DIY autonomous vehicles, there are many great autopilots for that ( ArduPilot , BetaFlight , PX4 ). CogniPilot instead focuses on state-of-the-art methologies for creating an autopilot with mathematically provable robustness properties. In order to achieve this level of reliability, accurate mathematical models of the vehicle and control software must be established that are beyond the expected domain of many hobbyists. However, for those willing to pursue the extra steps to create a mathematical model of their vehicle, templates are available to enable out of tree custom vehicles. CogniPilot is a new class of open source autopilot that can conduct safety critical missions such as transporting people, with a level of safety assurance not currently available in other open source autopilots. Minimum Viable Code for the Mission : By minimizing the lines of source code and branching, CogniPilot ensures higher reliability, maintainability, and verifiability of the project. Minimize Branch Statements in Control and Estimation Code : CogniPilot generally classifies its code components into two areas. The first is low-level driver and application code. The second is guidance, control, and estimation code for the vehicle. Developers carefully consider the addition of each branch (if statement etc.) in the code for the estimator and controller, as developers are modelling the entire system mathematically. Each branch statement considerably complicates the verification task. Minimize Maintenance to Maintain Reliability : A goal of CogniPilot is to support a wide variety of vehicles (Planes, Copters, Boats, Rovers, Submersibles) and user applications while maintaining software integrity and reliaiblity. CogniPilot plans to limit official support for each release to a minimal amount of vehicles for each class, while providing out of tree support via templates. Deprecate if No-longer Maintained : On each release cycle, the CogniPilot technical steering committee (TSC) will make a decision on whether to maintain official support for each vehicle platform or whether to adopt a new platform. This is to combat the slow creep in lines of code due to vehicle specific edge cases. Currently supported platforms: Rover B3RB ELM4 CogniPilot's upcoming release, to be named, but going by B-Mythical (a mythical creature with a name starting with B) will have planned additional support for: Mulirotor NXP RDDrone TBD Submersible TBD Plane TBD Software Stack Ubuntu 22.04 Zephyr RTOS 3.5 ROS 2 Humble Gazebo Garden To get started see Install","title":"About Airy"},{"location":"releases/airy/#about-airy-alicanto","text":"An Alicanto is a bird from Chilean mythology known to eat gold or silver and then glow. The bird is incapable of flight after overindulging on ore. Airy Alicanto represents the origin of CogniPilot's light weight, and minimalistic software stack following a correct by construction software paradigm.","title":"About Airy Alicanto"},{"location":"releases/airy/#correct-by-construction-design-drivers","text":"CogniPilot is not aiming to re-invent an opensource autopilot that can be a drop in replacement for use in Hobby drones, FPV Racing drones, or a wide variety of DIY autonomous vehicles, there are many great autopilots for that ( ArduPilot , BetaFlight , PX4 ). CogniPilot instead focuses on state-of-the-art methologies for creating an autopilot with mathematically provable robustness properties. In order to achieve this level of reliability, accurate mathematical models of the vehicle and control software must be established that are beyond the expected domain of many hobbyists. However, for those willing to pursue the extra steps to create a mathematical model of their vehicle, templates are available to enable out of tree custom vehicles. CogniPilot is a new class of open source autopilot that can conduct safety critical missions such as transporting people, with a level of safety assurance not currently available in other open source autopilots. Minimum Viable Code for the Mission : By minimizing the lines of source code and branching, CogniPilot ensures higher reliability, maintainability, and verifiability of the project. Minimize Branch Statements in Control and Estimation Code : CogniPilot generally classifies its code components into two areas. The first is low-level driver and application code. The second is guidance, control, and estimation code for the vehicle. Developers carefully consider the addition of each branch (if statement etc.) in the code for the estimator and controller, as developers are modelling the entire system mathematically. Each branch statement considerably complicates the verification task. Minimize Maintenance to Maintain Reliability : A goal of CogniPilot is to support a wide variety of vehicles (Planes, Copters, Boats, Rovers, Submersibles) and user applications while maintaining software integrity and reliaiblity. CogniPilot plans to limit official support for each release to a minimal amount of vehicles for each class, while providing out of tree support via templates. Deprecate if No-longer Maintained : On each release cycle, the CogniPilot technical steering committee (TSC) will make a decision on whether to maintain official support for each vehicle platform or whether to adopt a new platform. This is to combat the slow creep in lines of code due to vehicle specific edge cases.","title":"Correct by Construction Design Drivers"},{"location":"releases/airy/#currently-supported-platforms","text":"","title":"Currently supported platforms:"},{"location":"releases/airy/#rover","text":"B3RB ELM4 CogniPilot's upcoming release, to be named, but going by B-Mythical (a mythical creature with a name starting with B) will have planned additional support for:","title":"Rover"},{"location":"releases/airy/#mulirotor","text":"NXP RDDrone TBD","title":"Mulirotor"},{"location":"releases/airy/#submersible","text":"TBD","title":"Submersible"},{"location":"releases/airy/#plane","text":"TBD","title":"Plane"},{"location":"releases/airy/#software-stack","text":"Ubuntu 22.04 Zephyr RTOS 3.5 ROS 2 Humble Gazebo Garden To get started see Install","title":"Software Stack"},{"location":"releases/airy/getting_started/install/","text":"Installation Requirements Ubuntu 22.04 host environment This may work on other environments but only Ubuntu 22.04 is officially supported. Setup SSH keys on Host and GitHub Ensure that you have setup ssh keys on your host computer and GitHub to be able to clone the CogniPilot repositories: Connecting to GitHub with SSH Setup GPG keys on Host and GitHub (Optional) Ensure that you have setup gpg keys on your host computer and GitHub to sign your commits: Connecting to GitHub with SSH Install Git sudo apt install git Docker Option If you wish, there is a Docker Development Container that may be used. Clone Helmet mkdir -p ~/cognipilot cd ~/cognipilot git clone git@github.com:cognipilot/helmet Run Install Script (If not using docker) ~/cognipilot/helmet/install/native_install.sh . ~/.profile Convenience Scripts build_b3rb_SIL build_b3rb_sil This command executes the script build_b3rb_SIL . This script: Sets up the vcs workspaces based on yaml files provided in helmet. Builds the cranium ROS 2 workspace Builds Cerebri native_posix software-in-the-loop simuliation Builds Cyecca (control/estimation software) Builds Electrode (ground station software) docs docs This command executes the script docs . This script: Downloads and builds the documentation repository for the documentation you are reading so that contributions can be made easily. cyecca cyecca This script: Starts a JupyterLab instance for Cyecca to aid in developing algorithms. Run B3RB SIL (in JupyterLab terminal or Bash directly) ros2 launch b3rb_gz_bringup sil.launch.py Attention If running on a machine with a limited graphics card use: ros2 launch b3rb_gz_bringup sil.launch.py world:=basic_map Simulation Example of simulation running. Attention Use a joystick controller ( Logitech F310 suggested) to control vehicle modes. Select a Mode: A : manual X : cmd_vel (nav2) B : auto (nav2) Manual Mode: Left stick Up/Down: throttle Right stick Left/Right: steering Nav2 (cmd_vel) Mode: Click 2D Pose Goal and select desired location on RVIZ2 map. Auto Mode Click 2D Pose Goal and select desired location on RVIZ2 map. Arming START : arm BACK : disarm","title":"Getting Started"},{"location":"releases/airy/getting_started/install/#installation","text":"","title":"Installation"},{"location":"releases/airy/getting_started/install/#requirements","text":"Ubuntu 22.04 host environment This may work on other environments but only Ubuntu 22.04 is officially supported.","title":"Requirements"},{"location":"releases/airy/getting_started/install/#setup-ssh-keys-on-host-and-github","text":"Ensure that you have setup ssh keys on your host computer and GitHub to be able to clone the CogniPilot repositories: Connecting to GitHub with SSH","title":"Setup SSH keys on Host and GitHub"},{"location":"releases/airy/getting_started/install/#setup-gpg-keys-on-host-and-github-optional","text":"Ensure that you have setup gpg keys on your host computer and GitHub to sign your commits: Connecting to GitHub with SSH","title":"Setup GPG keys on Host and GitHub (Optional)"},{"location":"releases/airy/getting_started/install/#install-git","text":"sudo apt install git","title":"Install Git"},{"location":"releases/airy/getting_started/install/#docker-option","text":"If you wish, there is a Docker Development Container that may be used.","title":"Docker Option"},{"location":"releases/airy/getting_started/install/#clone-helmet","text":"mkdir -p ~/cognipilot cd ~/cognipilot git clone git@github.com:cognipilot/helmet","title":"Clone Helmet"},{"location":"releases/airy/getting_started/install/#run-install-script-if-not-using-docker","text":"~/cognipilot/helmet/install/native_install.sh . ~/.profile","title":"Run Install Script (If not using docker)"},{"location":"releases/airy/getting_started/install/#convenience-scripts","text":"","title":"Convenience Scripts"},{"location":"releases/airy/getting_started/install/#build_b3rb_sil","text":"build_b3rb_sil This command executes the script build_b3rb_SIL . This script: Sets up the vcs workspaces based on yaml files provided in helmet. Builds the cranium ROS 2 workspace Builds Cerebri native_posix software-in-the-loop simuliation Builds Cyecca (control/estimation software) Builds Electrode (ground station software)","title":"build_b3rb_SIL"},{"location":"releases/airy/getting_started/install/#docs","text":"docs This command executes the script docs . This script: Downloads and builds the documentation repository for the documentation you are reading so that contributions can be made easily.","title":"docs"},{"location":"releases/airy/getting_started/install/#cyecca","text":"cyecca This script: Starts a JupyterLab instance for Cyecca to aid in developing algorithms.","title":"cyecca"},{"location":"releases/airy/getting_started/install/#run-b3rb-sil-in-jupyterlab-terminal-or-bash-directly","text":"ros2 launch b3rb_gz_bringup sil.launch.py Attention If running on a machine with a limited graphics card use: ros2 launch b3rb_gz_bringup sil.launch.py world:=basic_map","title":"Run B3RB SIL (in JupyterLab terminal or Bash directly)"},{"location":"releases/airy/getting_started/install/#simulation","text":"Example of simulation running. Attention Use a joystick controller ( Logitech F310 suggested) to control vehicle modes.","title":"Simulation"},{"location":"releases/airy/getting_started/install/#select-a-mode","text":"A : manual X : cmd_vel (nav2) B : auto (nav2)","title":"Select a Mode:"},{"location":"releases/airy/getting_started/install/#manual-mode","text":"Left stick Up/Down: throttle Right stick Left/Right: steering","title":"Manual Mode:"},{"location":"releases/airy/getting_started/install/#nav2-cmd_vel-mode","text":"Click 2D Pose Goal and select desired location on RVIZ2 map.","title":"Nav2 (cmd_vel) Mode:"},{"location":"releases/airy/getting_started/install/#auto-mode","text":"Click 2D Pose Goal and select desired location on RVIZ2 map.","title":"Auto Mode"},{"location":"releases/airy/getting_started/install/#arming","text":"START : arm BACK : disarm","title":"Arming"},{"location":"releases/airy/getting_started/advanced/docker/","text":"Docker If you wish, there is a development docker container ( docker hub , docker source ) for CogniPilot with Nvidia GPU support. If you use this option, do not run the native_install script, as the packages are already installed. Dependencies You must install the latest official docker. Install Docker Tip Don't forget Linux Post Install Clone Docker Repository On the Host mkdir -p ~/cognipilot cd ~/cognipilot git clone https://github.com/cognipilot/docker cd ~/cognipilot/docker git submodule update --init --recursive Start the Docker Image The dream start command, automatically pulls the dream image from dockerhub, and starts the image. On the Host cd ~/cognipilot/docker/dream ./dream start Execute a Command on the Docker Image This starts a shell within the container. On the Host ./dream exec If passed extra arguments will run those commands as well. Convenience Scripts (Docker Specific) unlock This command executes the script docs . Unlocks GPG and SSH keys mounted in the docker image. Within the Container unlock See the other non-docker specific scripts in the main installation Build the Docker Image (For Advanced Users) This process will take awhile. It is usually sufficient to use dream start instead, which will automatically pull the latest image from dockerhub. On the Host cd ~/cognipilot/docker/dream ./dream build","title":"Docker"},{"location":"releases/airy/getting_started/advanced/docker/#docker","text":"If you wish, there is a development docker container ( docker hub , docker source ) for CogniPilot with Nvidia GPU support. If you use this option, do not run the native_install script, as the packages are already installed.","title":"Docker"},{"location":"releases/airy/getting_started/advanced/docker/#dependencies","text":"You must install the latest official docker. Install Docker Tip Don't forget Linux Post Install","title":"Dependencies"},{"location":"releases/airy/getting_started/advanced/docker/#clone-docker-repository","text":"On the Host mkdir -p ~/cognipilot cd ~/cognipilot git clone https://github.com/cognipilot/docker cd ~/cognipilot/docker git submodule update --init --recursive","title":"Clone Docker Repository"},{"location":"releases/airy/getting_started/advanced/docker/#start-the-docker-image","text":"The dream start command, automatically pulls the dream image from dockerhub, and starts the image. On the Host cd ~/cognipilot/docker/dream ./dream start","title":"Start the Docker Image"},{"location":"releases/airy/getting_started/advanced/docker/#execute-a-command-on-the-docker-image","text":"This starts a shell within the container. On the Host ./dream exec If passed extra arguments will run those commands as well.","title":"Execute a Command on the Docker Image"},{"location":"releases/airy/getting_started/advanced/docker/#convenience-scripts-docker-specific","text":"","title":"Convenience Scripts (Docker Specific)"},{"location":"releases/airy/getting_started/advanced/docker/#unlock","text":"This command executes the script docs . Unlocks GPG and SSH keys mounted in the docker image. Within the Container unlock See the other non-docker specific scripts in the main installation","title":"unlock"},{"location":"releases/airy/getting_started/advanced/docker/#build-the-docker-image-for-advanced-users","text":"This process will take awhile. It is usually sufficient to use dream start instead, which will automatically pull the latest image from dockerhub. On the Host cd ~/cognipilot/docker/dream ./dream build","title":"Build the Docker Image (For Advanced Users)"},{"location":"releases/b-mythical/","text":"About B-mythical Name to be determined. Current development work is on the main branches of of all respective repositories till fully released and branched. See the current progress on the Roadmap . Software Stack Ubuntu 24.04 Zephyr RTOS 3.6+ ROS 2 Jazzy Gazebo Ionic","title":"B Mythical"},{"location":"releases/b-mythical/#about-b-mythical","text":"Name to be determined. Current development work is on the main branches of of all respective repositories till fully released and branched. See the current progress on the Roadmap .","title":"About B-mythical"},{"location":"releases/b-mythical/#software-stack","text":"Ubuntu 24.04 Zephyr RTOS 3.6+ ROS 2 Jazzy Gazebo Ionic","title":"Software Stack"},{"location":"resources/contribute/","text":"Contribute","title":"Contribute"},{"location":"resources/contribute/#contribute","text":"","title":"Contribute"},{"location":"spinali/canfd/","text":"CANFD Overview","title":"CANFD Overview"},{"location":"spinali/canfd/#canfd-overview","text":"","title":"CANFD Overview"},{"location":"spinali/actuators/actuators/","text":"Actuators Overview","title":"Actuators Overview"},{"location":"spinali/actuators/actuators/#actuators-overview","text":"","title":"Actuators Overview"},{"location":"spinali/sensors/sensors/","text":"Sensors Overview","title":"Sensors Overview"},{"location":"spinali/sensors/sensors/#sensors-overview","text":"","title":"Sensors Overview"},{"location":"tools/hcdf/hcdf/","text":"HCDF Overview","title":"HCDF Overview"},{"location":"tools/hcdf/hcdf/#hcdf-overview","text":"","title":"HCDF Overview"},{"location":"tools/pyecca/pyecca/","text":"Pyecca Overview","title":"Pyecca"},{"location":"tools/pyecca/pyecca/#pyecca-overview","text":"","title":"Pyecca Overview"}]}